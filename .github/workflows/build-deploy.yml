name: Build & Deploy

on:
  pull_request:
    paths-ignore:
    - 'README.md'
    - 'CODE_OF_CONDUCT.md'
    - 'CONTRIBUTING.md'
    - 'LICENSE'
    - 'SECURITY.md'
    - 'docs/**'
    - '.github/**'
    - '!.github/workflows/build-deploy.yml'
  push:
    branches:
    - develop
    - main
    - release/*
    tags: '[0-9]+.[0-9]+.[0-9]+'
    paths-ignore:
    - 'README.md'
    - 'CODE_OF_CONDUCT.md'
    - 'CONTRIBUTING.md'
    - 'LICENSE'
    - 'SECURITY.md'
    - 'docs/**'
    - '.github/**'
    - '!.github/workflows/build-deploy.yml'
  release:
    types:
    - created

# Keep in sync with codeql-analysis.yml and test.yml
env:
  CI: true
  node: 18
  java: 17
  RAW_URL: https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '${{ env.node }}'
        cache: 'npm'
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '${{ env.java }}'
        cache: 'gradle'
    - name: Production Build
      run: ./gradlew -Pprod -Pwar clean bootWar
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: Artemis.war
        path: build/libs/Artemis-*.war
    - name: Upload Release Artifact
      if: github.event_name == 'release' && github.event.action == 'created'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: build/libs/Artemis-${{ github.event.release.tag_name }}.war
        asset_name: Artemis.war
        asset_content_type: application/x-webarchive

  docker:
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == 'Hialus/Artemis' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: Artemis.war
    - name: Build Docker Image
      run: docker build --build-arg WAR_PATH=. -t artemis -f src/main/docker/Dockerfile .

    - name: Compute Tag
      uses: actions/github-script@v6
      id: compute-tag
      with:
        result-encoding: string
        script: |
          if (context.eventName === "pull_request") {
            return "pr-" + context.issue.number;
          }
          if (context.eventName === "release") {
            return "latest";
          }
          if (context.eventName === "push") {
            if (context.ref.startsWith("refs/tags/")) {
              return context.ref.slice(10);
            }
            if (context.ref === "refs/heads/develop") {
              return "develop";
            }
          }
          return "FALSE";

    # Push to GitHub Container Registry
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
      if: ${{ steps.compute-tag.outputs.result != 'FALSE' }}
    - name: Push to GitHub Container Registry
      env:
        TAG: ${{ steps.compute-tag.outputs.result }}
      run: |
        docker tag artemis ghcr.io/hialus/artemis:$TAG
        docker push ghcr.io/hialus/artemis:$TAG
      if: ${{ steps.compute-tag.outputs.result != 'FALSE' }}

    # TODO: Push to Docker Hub (develop + tag)

    # TODO: Push to Chair Harbour (??)

  deploy:
    if: ${{ github.event_name == 'pull_request' }}
    needs: docker
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - environment: Artemis Test 5
            lock_label: Artemis Test 5
            url: https://artemistest5.ase.in.tum.de
            user: bamboo
            hosts: artemistest5.ase.in.tum.de
            folder: /opt/artemis
            host_keys: |
                vmbhatotia2.in.tum.de ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAID9rUhkfEds+gDdJSGBmmAn1tvD7UjeTwrLU39ACqSqD
                vmbhatotia2.in.tum.de ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJnqub476unejWdlhJV+D3kN0gmQor6bAa+LKgPy3ad4/NGP+dNACkj41gRwCcihEQnb7iwVhBM5Svc4uOoUfHs="

    environment:
      name: ${{ matrix.environment }}
      url: ${{ matrix.url }}

    env:
      DEPLOYMENT_USER: ${{ matrix.user }}
      DEPLOYMENT_HOSTS: ${{ matrix.hosts }}
      DEPLOYMENT_FOLDER: ${{ matrix.folder }}
      DEPLOYMENT_HOST_PUBLIC_KEYS: ${{ matrix.host_keys }}
      GATEWAY_USER: "jump"
      GATEWAY_HOST: "gateway.artemis.in.tum.de:2010"
      GATEWAY_HOST_PUBLIC_KEY: "[gateway.artemis.in.tum.de]:2010 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKtTLiKRILjKZ+Qg4ReWKsG7mLDXkzHfeY5nalSQUNQ4"

    steps:
    - name: Check "lock:${{ matrix.environment }}" label
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const opts = github.rest.issues.listForRepo.endpoint.merge({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['lock:${{ matrix.lock_label }}']
          })
          const issues = await github.paginate(opts)
          if (issues.length == 1 && (!context.issue || issues[0].number != context.issue.number)) {
            core.setFailed(`Testserver "${{ matrix.environment }}" is already in use by PR #${issues[0].number}.`);
          } else if (issues.length > 1) {
            core.setFailed('Testserver "${{ matrix.environment }}" is already in use by multiple PRs. Check PRs with label "lock:${{ matrix.lock_label }}"!');
          } else if (context.issue && context.issue.number) {
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['lock:${{ matrix.lock_label }}']
            })
          }

    - name: Compute Tag
      uses: actions/github-script@v6
      id: compute-tag
      with:
          result-encoding: string
          script: |
              if (context.eventName === "pull_request") {
                return "pr-" + context.issue.number;
              }
              if (context.eventName === "release") {
                return "latest";
              }
              if (context.eventName === "push") {
                if (context.ref.startsWith("refs/tags/")) {
                  return context.ref.slice(10);
                }
                if (context.ref === "refs/heads/develop") {
                  return "develop";
                }
              }
              return "FALSE";

    - name: Compute Branch Name
      uses: actions/github-script@v6
      id: compute-branch
      with:
          result-encoding: string
          script: |
              if (context.eventName === "pull_request") {
                return context.ref.slice(10);
              }
              return "FALSE";

    # Download artemis-server-cli from GH without cloning the Repo
    - name: Fetch Artemis CLI
      run: |
        echo ${{ env.RAW_URL }}
        wget ${{ env.RAW_URL }}/artemis-server-cli
        cat artemis-server-cli
        chmod +x artemis-server-cli

    # Configure SSH Key
    - name: Setup SSH Keys and known_hosts
      env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          GATEWAY_SSH_KEY: "${{ secrets.GATEWAY_SSH_KEY }}"
          DEPLOYMENT_SSH_KEY: "${{ secrets.DEPLOYMENT_SSH_KEY }}"
      run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< $GATEWAY_SSH_KEY
          ssh-add - <<< $DEPLOYMENT_SSH_KEY
          cat - <<< $GATEWAY_HOST_PUBLIC_KEY >> ~/.ssh/known_hosts
          cat - <<< $DEPLOYMENT_HOST_PUBLIC_KEYS >> ~/.ssh/known_hosts

    - name: Deploy Artemis with Docker
      env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          TAG: ${{ steps.compute-tag.outputs.result }}
          BRANCH: ${{ steps.compute-branch.outputs.result }}
      run: |
          for host in $DEPLOYMENT_HOSTS; do
            ./artemis-server-cli deploy "$DEPLOYMENT_USER@$host" -g "$GATEWAY_USER@$GATEWAY_HOST:2010" -t $TAG -p $BRANCH -c $DEPLOYMENT_FOLDER -y
            sleep 20
          done
